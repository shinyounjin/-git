 리스트의 인덱스는 0부터 시작한다
digit_korean = ["영", "일", "이", "삼", "사", "오", "육", "칠", "팔", "구"]
# 인덱스:     [ 0,   1,   2,   3,   4,   5,   6,    7,    8,    9 ]

print(f"변수 i의 값={i}"): 반복이 수행될 때마다 현재 변수 i의 값을 포함하는 문자열을 출력합니다. f""는 f-string이라고 불리는 파이썬의 문자열 포맷팅 방식입니다.

f""를 쓰는 주된 이유는 다음과 같습니다.
변수 값을 문자열 안에 직접 삽입하기 편리합니다.
{변수 이름} 형태로 변수 이름만 중괄호 안에 넣어주면, 실행될 때 그 변수가 가지고 있는 실제 값이 문자열 안에 삽입됩니다.
예: name = "파이썬", print(f"안녕하세요, {name}!") -> "안녕하세요, 파이썬!" 출력
문자열 안에서 간단한 계산이나 표현식 실행 결과를 바로 삽입할 수 있습니다.
{간단한 계산식} 형태로 계산식을 중괄호 안에 넣어주면, 계산 결과가 문자열 안에 삽입됩니다.
예: x = 10, y = 20, print(f"{x} + {y} = {x+y}") -> "10 + 20 = 30" 출력
구구단 예제의 f"{dan}*{i}={dan*i}"에서 {dan*i} 부분이 바로 이 기능을 사용한 것입니다. dan과 i를 곱한 결과가 그 자리에 들어갑니다.

int(...): input() 함수가 반환한 문자열을 정수(integer)로 변환합니다. 만약 사용자가 숫자가 아닌 것을 입력하면 오류가 발생할 수 있습니다.

time.sleep(1)은 프로그램 실행을 1초 동안 멈춥니다. 이 줄 덕분에 print 문이 1초 간격으로 실행되어 실제 타이머처럼 작동합니다.

 range() 함수의 세 번째 인자(step, 증가/감소 값)가 기본값(default value)으로 1을 가지고 있다. range(start, stop)를 사용했을 때, 세 번째 인자인 step이 생략되었기 때문에 자동으로 기본값인 1이 적용됩니다. 

print() 함수에 여러 인자(변수 x, 문자열 "+" 등)를 쉼표로 구분하여 넘겨주면, 기본적으로 각 인자 사이에 공백을 넣어 출력합니다. print(값1, 값2, 값3, ...) 형태로 여러 개의 분리된 값들을 출력하고 싶을 때는 쉼표가 필수입니다. 쉼표는 각 값들이 print 함수에게 전달되는 별개의 인자임을 알려주는 구분자 역할을 합니다.

print()
 ▪ 인수없이 호출시 출력될 내용이 없으므로 줄바꿈처리만 일어남

print(2, '+', 3, '=', 2 + 3)  => 2 + 3 = 5

한문장에 변수이름과 그에대한 초기값을 콤마(,)로 구분해서 각각 순서대로나열     변수이름1, 변수이름2 =초기값1, 초기값2

def 키워드를 사용하여 show_message(예시)라는 이름의 함수를 정의합니다. 어떤 일련의 코드들이 하나의 논리적인 작업 단위를 이루거나, 여러 번 반복해서 사용될 가능성이 있다면 def를 사용하여 함수로 정의하는 것을 고려해야 합니다.

sep는 여러 인자 사이에 오는 문자를, end는 출력의 끝에 오는 문자를 제어하는 역할을 합니다.
end 키워드 인수는 print() 함수가 모든 인수를 출력한 마지막에 출력할 문자를 지정합니다.

return 'good bye'는 show_message 함수가 실행될 때 'good bye'라는 값을 호출한 곳으로 돌려주도록 설계된 부분입니다.

input() : 프로그램이 실행되는 동안 사용자로부터 키보드를통해 하나의'문자열'을 입력받아 반환

if 다음에 조건식이 옵니다. 이 조건식이 참(True)이면 if 바로 아래 들여쓰기 된 코드 블록이 실행되고, 거짓(False)이면 else 아래 들여쓰기 된 코드 블록이 실행됩니다.

파이썬 내장 함수 len()은 괄호 () 안에 있는 것(여기서는 word 변수에 저장된 문자열)의 길이를 알려줍니다. 예를 들어 word가 "life"면 len(word)는 4입니다. word가 빈 문자열 ""이면 len(word)는 0입니다.

word[0]: word 변수에 저장된 문자열에서 인덱싱을 사용하여 첫 번째 글자를 가져옵니다. 파이썬에서 문자열의 글자 위치는 0부터 시작합니다. [0]은 첫 번째 글자를 의미합니다.

+:  덧셈
-:  뺄셈
*:  곱셈
/:  나눗셈 (결과는 항상 실수입니다.)
//:  몫 (나눗셈의 정수 부분만 가집니다.)
%:  나머지 (나눗셈의 나머지 값을 가집니다.)
**:  거듭제곱
==:  두 항의 값이 같은지 비교합니다.
!=:  두 항의 값이 같지 않은지 비교합니다.
<:  왼쪽 항이 오른쪽 항보다 작은지 비교합니다.
>:  왼쪽 항이 오른쪽 항보다 큰지 비교합니다.
<=:  왼쪽 항이 오른쪽 항보다 작거나 같은지 비교합니다.
>=:  왼쪽 항이 오른쪽 항보다 크거나 같은지 비교합니다.
and:  좌우의 두 피연산자가 모두 True일 때만 True를 반환합니다.
or:  좌우의 두 피연산자 중 하나라도 True이면 True를 반환합니다.
not:  피연산자의 논리값을 반전시킵니다 (True는 False로, False는 True로).
+=:  덧셈 후 대입 (예: x += 1은 x = x + 1과 같습니다.)
-=:  뺄셈 후 대입
*=:  곱셈 후 대입
/=:  나눗셈 후 대입
//=:  몫 계산 후 대입
%=:  나머지 계산 후 대입
**=:  거듭제곱 후 대입
&=:  비트 AND 후 대입
|=:  비트 OR 후 대입
^=:  비트 XOR 후 대입
<<=:  비트 왼쪽 시프트 후 대입
>>=:  비트 오른쪽 시프트 후 대입

변수 = int('숫자로구성된문자열')  # 인수를 정수로 변환  예) 123
변수 = float('숫자로구성된문자열')  #인수를 실수로 변환  예) 123.0

무언가를 실행(호출)할 때는 ()를 사용하고, 순서 있는 데이터에서 특정 위치의 값이나 범위를 가져올 때는 []를 사용
1. 문자열 (String): str 타입
글자들의 순서 있는 나열입니다. 한 글자 한 글자가 인덱스를 가집니다.
예시: word = "Python"
word[0] -> 'P' (첫 번째 글자)
word[1:4] -> 'yth' (인덱스 1부터 4 앞까지)
word[:] -> 'Python' (전체)
2. 리스트 (List): list 타입
여러 종류의 값들을 순서대로 담을 수 있는 변경 가능한(mutable) 컬렉션입니다. 각 요소가 인덱스를 가집니다.
예시: my_list = [10, "apple", 3.14, [1, 2]]
my_list[0] -> 10
my_list[1] -> "apple"
my_list[3] -> [1, 2] (리스트 안의 리스트도 접근 가능)
my_list[0:2] -> [10, "apple"] (슬라이싱)

randint(a, b): 이 함수는 a부터 b까지의 정수 중에서 완전히 무작위로 하나를 골라 반환해 줍니다. 주사위를 던질 때마다 1부터 6까지의 숫자 중 무엇이 나올지 예측할 수 없는 것처럼, randint(1, 6)을 호출할 때마다 다른 무작위 숫자가 나올 수 있습니다. 이것이 **랜덤(Randomness)**입니다.

if __name__ == '__main__':: 이 줄은 파이썬에서 흔히 사용되는 구문입니다. 이 조건문은 현재 스크립트 파일이 파이썬 인터프리터에 의해 직접 실행될 때만 if 블록 안의 코드를 실행하도록 합니다. 만약 이 파일이 다른 파이썬 파일에서 import되어 사용될 때는 이 조건이 거짓이 되어 if 블록 안의 코드가 실행되지 않습니다. 이는 모듈로 사용될 때와 직접 실행될 때의 동작을 다르게 하고 싶을 때 유용합니다 (강의 자료 4주차 4절 모듈 부분에서 name 변수와 이 구문에 대해 자세히 설명하고 있습니다 - 29페이지).
main(): if 조건이 참일 때 (파일이 직접 실행될 때) main() 함수를 호출합니다. 이 호출에 의해 위에서 정의된 main() 함수 안의 코드들이 실행되고, 결과적으로 주사위 눈금 5개가 화면에 출력됩니다.

return을 쓰는 함수는 함수 안에서만 알 수 있는 결과를 만들고 혼자 끝나는 것이 아니라, 그 결과 값을 함수 바깥의 호출했던 코드에게 되돌려 줌으로써, 함수 바깥에서도 그 결과를 활용(다른 계산, 조건 판단, 출력 등)할 수 있도록 해준다는 뜻입니다.
앞서 보신 원 넓이 코드에서 get_circle_area 함수는 return area를 통해 계산된 넓이 값을 호출한 곳으로 돌려주었고, 주 프로그램 부에서는 area = get_circle_area(radius) 처럼 그 값을 area 변수에 받아서 print(area)로 출력하는 데 사용했습니다. 만약 return이 없었다면 get_circle_area 함수 안에서 계산된 넓이 값은 함수가 끝남과 동시에 사라져서 주 프로그램 부에서는 그 값을 알 방법이 없었을 것입니다.   

import time: 이 줄은 파이썬의 time 모듈을 프로그램으로 가져오는 역할을 합니다. time 모듈은 시간과 관련된 다양한 기능을 제공하는데, 여기서는 time.sleep() 함수를 사용하기 위해 가져옵니다. time.sleep() 함수는 프로그램 실행을 일정 시간 동안 멈추는 기능을 합니다.
